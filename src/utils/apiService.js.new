import axios from 'axios';
import { API_BASE_URL } from './api';

// Create an axios instance with default config
const apiClient = axios.create({
  baseURL: API_BASE_URL,
  headers: {
    'Content-Type': 'application/json',
    'Accept': 'application/json'
  },
  withCredentials: false // Set to false for CORS
});

// Add a request interceptor to include auth token
apiClient.interceptors.request.use(
  config => {
    const token = localStorage.getItem('token');
    if (token) {
      config.headers['Authorization'] = `Bearer ${token}`;
    }
    return config;
  },
  error => {
    return Promise.reject(error);
  }
);

// Add a response interceptor to handle common errors
apiClient.interceptors.response.use(
  response => {
    return response;
  },
  error => {
    // Handle CORS errors more gracefully
    if (error.message === 'Network Error') {
      console.error('Network error - possible CORS issue');
      // You could implement a fallback strategy here
    }
    
    return Promise.reject(error);
  }
);

// API service methods
const apiService = {
  // Auth methods
  login: async (email, password) => {
    try {
      const response = await apiClient.post('admin/login', { email, password });
      return response.data;
    } catch (error) {
      console.error('Login error:', error);
      throw error;
    }
  },
  
  // Dashboard data methods
  getDashboardData: async () => {
    try {
      const response = await apiClient.get('analytics/dashboard');
      return response.data;
    } catch (error) {
      console.error('Error fetching dashboard data:', error);
      throw error;
    }
  },
  
  // Model methods
  getModels: async () => {
    try {
      const response = await apiClient.get('prediction/models');
      return response.data;
    } catch (error) {
      console.error('Error fetching models:', error);
      throw error;
    }
  },
  
  runPrediction: async (modelId, data) => {
    try {
      const response = await apiClient.post(`prediction/${modelId}/predict`, data);
      return response.data;
    } catch (error) {
      console.error('Error running prediction:', error);
      throw error;
    }
  },
  
  // Generic methods
  get: async (endpoint) => {
    try {
      const response = await apiClient.get(endpoint);
      return response.data;
    } catch (error) {
      console.error(`Error fetching ${endpoint}:`, error);
      throw error;
    }
  },
  
  post: async (endpoint, data) => {
    try {
      const response = await apiClient.post(endpoint, data);
      return response.data;
    } catch (error) {
      console.error(`Error posting to ${endpoint}:`, error);
      throw error;
    }
  },
  
  put: async (endpoint, data) => {
    try {
      const response = await apiClient.put(endpoint, data);
      return response.data;
    } catch (error) {
      console.error(`Error updating ${endpoint}:`, error);
      throw error;
    }
  },
  
  delete: async (endpoint) => {
    try {
      const response = await apiClient.delete(endpoint);
      return response.data;
    } catch (error) {
      console.error(`Error deleting ${endpoint}:`, error);
      throw error;
    }
  }
};

export default apiService;
